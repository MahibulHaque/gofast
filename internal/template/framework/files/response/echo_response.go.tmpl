package response

import (
	"encoding/json"
	"net/http"
	"github.com/labstack/echo/v4"
)

func JSON(c echo.Context, status int, data any) error {
	return JSONWithHeaders(c, status, data, nil)
}

func JSONWithHeaders(c echo.Context, status int, data any, headers http.Header) error {
	js, err := json.MarshalIndent(data, "", "\t")
	if err != nil {
		return err
	}

	js = append(js, '\n')

	for key, values := range headers {
		for _, value := range values {
			c.Response().Header().Add(key, value)
		}
	}

	return c.Blob(status, "application/json", js)
}

// Alternative: Use Echo's built-in JSON methods (more idiomatic)
func JSONEchoStyle(c echo.Context, status int, data any) error {
	return c.JSON(status, data)
}

func JSONWithHeadersEchoStyle(c echo.Context, status int, data any, headers http.Header) error {
	for key, values := range headers {
		for _, value := range values {
			c.Response().Header().Add(key, value)
		}
	}
	return c.JSON(status, data)
}
